// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: note.proto

package note_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// Validate checks the field values on CreateNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoteRequestMultiError, or nil if none found.
func (m *CreateNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Text

	// no validation rules for Author

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateNoteRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateNoteRequestMultiError(errors)
	}

	return nil
}

func (m *CreateNoteRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateNoteRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateNoteRequestMultiError is an error wrapping multiple validation errors
// returned by CreateNoteRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoteRequestMultiError) AllErrors() []error { return m }

// CreateNoteRequestValidationError is the validation error returned by
// CreateNoteRequest.Validate if the designated constraints aren't met.
type CreateNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoteRequestValidationError) ErrorName() string {
	return "CreateNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoteRequestValidationError{}

// Validate checks the field values on CreateNoteResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNoteResponce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNoteResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNoteResponceMultiError, or nil if none found.
func (m *CreateNoteResponce) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNoteResponce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNoteResponceMultiError(errors)
	}

	return nil
}

// CreateNoteResponceMultiError is an error wrapping multiple validation errors
// returned by CreateNoteResponce.ValidateAll() if the designated constraints
// aren't met.
type CreateNoteResponceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNoteResponceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNoteResponceMultiError) AllErrors() []error { return m }

// CreateNoteResponceValidationError is the validation error returned by
// CreateNoteResponce.Validate if the designated constraints aren't met.
type CreateNoteResponceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNoteResponceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNoteResponceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNoteResponceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNoteResponceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNoteResponceValidationError) ErrorName() string {
	return "CreateNoteResponceValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNoteResponceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNoteResponce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNoteResponceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNoteResponceValidationError{}

// Validate checks the field values on GetNoteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetNoteRequestMultiError,
// or nil if none found.
func (m *GetNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetNoteRequestMultiError(errors)
	}

	return nil
}

// GetNoteRequestMultiError is an error wrapping multiple validation errors
// returned by GetNoteRequest.ValidateAll() if the designated constraints
// aren't met.
type GetNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoteRequestMultiError) AllErrors() []error { return m }

// GetNoteRequestValidationError is the validation error returned by
// GetNoteRequest.Validate if the designated constraints aren't met.
type GetNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoteRequestValidationError) ErrorName() string { return "GetNoteRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoteRequestValidationError{}

// Validate checks the field values on GetNoteResponce with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNoteResponce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNoteResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNoteResponceMultiError, or nil if none found.
func (m *GetNoteResponce) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNoteResponce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Text

	// no validation rules for Author

	if len(errors) > 0 {
		return GetNoteResponceMultiError(errors)
	}

	return nil
}

// GetNoteResponceMultiError is an error wrapping multiple validation errors
// returned by GetNoteResponce.ValidateAll() if the designated constraints
// aren't met.
type GetNoteResponceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNoteResponceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNoteResponceMultiError) AllErrors() []error { return m }

// GetNoteResponceValidationError is the validation error returned by
// GetNoteResponce.Validate if the designated constraints aren't met.
type GetNoteResponceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNoteResponceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNoteResponceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNoteResponceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNoteResponceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNoteResponceValidationError) ErrorName() string { return "GetNoteResponceValidationError" }

// Error satisfies the builtin error interface
func (e GetNoteResponceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNoteResponce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNoteResponceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNoteResponceValidationError{}

// Validate checks the field values on GetListNoteResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListNoteResponce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListNoteResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListNoteResponceMultiError, or nil if none found.
func (m *GetListNoteResponce) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListNoteResponce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetListNoteResponceValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetListNoteResponceValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetListNoteResponceValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetListNoteResponceMultiError(errors)
	}

	return nil
}

// GetListNoteResponceMultiError is an error wrapping multiple validation
// errors returned by GetListNoteResponce.ValidateAll() if the designated
// constraints aren't met.
type GetListNoteResponceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListNoteResponceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListNoteResponceMultiError) AllErrors() []error { return m }

// GetListNoteResponceValidationError is the validation error returned by
// GetListNoteResponce.Validate if the designated constraints aren't met.
type GetListNoteResponceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListNoteResponceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListNoteResponceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListNoteResponceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListNoteResponceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListNoteResponceValidationError) ErrorName() string {
	return "GetListNoteResponceValidationError"
}

// Error satisfies the builtin error interface
func (e GetListNoteResponceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListNoteResponce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListNoteResponceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListNoteResponceValidationError{}

// Validate checks the field values on UpdateNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoteRequestMultiError, or nil if none found.
func (m *UpdateNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Text

	// no validation rules for Author

	if len(errors) > 0 {
		return UpdateNoteRequestMultiError(errors)
	}

	return nil
}

// UpdateNoteRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateNoteRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoteRequestMultiError) AllErrors() []error { return m }

// UpdateNoteRequestValidationError is the validation error returned by
// UpdateNoteRequest.Validate if the designated constraints aren't met.
type UpdateNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoteRequestValidationError) ErrorName() string {
	return "UpdateNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoteRequestValidationError{}

// Validate checks the field values on UpdateNoteResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNoteResponce) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNoteResponce with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNoteResponceMultiError, or nil if none found.
func (m *UpdateNoteResponce) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNoteResponce) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewTitle

	if len(errors) > 0 {
		return UpdateNoteResponceMultiError(errors)
	}

	return nil
}

// UpdateNoteResponceMultiError is an error wrapping multiple validation errors
// returned by UpdateNoteResponce.ValidateAll() if the designated constraints
// aren't met.
type UpdateNoteResponceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNoteResponceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNoteResponceMultiError) AllErrors() []error { return m }

// UpdateNoteResponceValidationError is the validation error returned by
// UpdateNoteResponce.Validate if the designated constraints aren't met.
type UpdateNoteResponceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNoteResponceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNoteResponceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNoteResponceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNoteResponceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNoteResponceValidationError) ErrorName() string {
	return "UpdateNoteResponceValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNoteResponceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNoteResponce.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNoteResponceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNoteResponceValidationError{}

// Validate checks the field values on DeleteNoteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteNoteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNoteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNoteRequestMultiError, or nil if none found.
func (m *DeleteNoteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNoteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteNoteRequestMultiError(errors)
	}

	return nil
}

// DeleteNoteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteNoteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteNoteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNoteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNoteRequestMultiError) AllErrors() []error { return m }

// DeleteNoteRequestValidationError is the validation error returned by
// DeleteNoteRequest.Validate if the designated constraints aren't met.
type DeleteNoteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNoteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNoteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNoteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNoteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNoteRequestValidationError) ErrorName() string {
	return "DeleteNoteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNoteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNoteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNoteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNoteRequestValidationError{}

// Validate checks the field values on GetListNoteResponce_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListNoteResponce_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListNoteResponce_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetListNoteResponce_ResultMultiError, or nil if none found.
func (m *GetListNoteResponce_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListNoteResponce_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetListNoteResponce_ResultValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetListNoteResponce_ResultValidationError{
						field:  fmt.Sprintf("Notes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetListNoteResponce_ResultValidationError{
					field:  fmt.Sprintf("Notes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetListNoteResponce_ResultMultiError(errors)
	}

	return nil
}

// GetListNoteResponce_ResultMultiError is an error wrapping multiple
// validation errors returned by GetListNoteResponce_Result.ValidateAll() if
// the designated constraints aren't met.
type GetListNoteResponce_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListNoteResponce_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListNoteResponce_ResultMultiError) AllErrors() []error { return m }

// GetListNoteResponce_ResultValidationError is the validation error returned
// by GetListNoteResponce_Result.Validate if the designated constraints aren't met.
type GetListNoteResponce_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListNoteResponce_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListNoteResponce_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListNoteResponce_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListNoteResponce_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListNoteResponce_ResultValidationError) ErrorName() string {
	return "GetListNoteResponce_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e GetListNoteResponce_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListNoteResponce_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListNoteResponce_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListNoteResponce_ResultValidationError{}

// Validate checks the field values on GetListNoteResponce_Result_Note with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetListNoteResponce_Result_Note) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetListNoteResponce_Result_Note with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetListNoteResponce_Result_NoteMultiError, or nil if none found.
func (m *GetListNoteResponce_Result_Note) ValidateAll() error {
	return m.validate(true)
}

func (m *GetListNoteResponce_Result_Note) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Text

	// no validation rules for Author

	if len(errors) > 0 {
		return GetListNoteResponce_Result_NoteMultiError(errors)
	}

	return nil
}

// GetListNoteResponce_Result_NoteMultiError is an error wrapping multiple
// validation errors returned by GetListNoteResponce_Result_Note.ValidateAll()
// if the designated constraints aren't met.
type GetListNoteResponce_Result_NoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetListNoteResponce_Result_NoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetListNoteResponce_Result_NoteMultiError) AllErrors() []error { return m }

// GetListNoteResponce_Result_NoteValidationError is the validation error
// returned by GetListNoteResponce_Result_Note.Validate if the designated
// constraints aren't met.
type GetListNoteResponce_Result_NoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetListNoteResponce_Result_NoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetListNoteResponce_Result_NoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetListNoteResponce_Result_NoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetListNoteResponce_Result_NoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetListNoteResponce_Result_NoteValidationError) ErrorName() string {
	return "GetListNoteResponce_Result_NoteValidationError"
}

// Error satisfies the builtin error interface
func (e GetListNoteResponce_Result_NoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetListNoteResponce_Result_Note.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetListNoteResponce_Result_NoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetListNoteResponce_Result_NoteValidationError{}
